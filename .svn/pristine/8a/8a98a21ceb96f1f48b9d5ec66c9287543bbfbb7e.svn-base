/**
 * @date2016-10-19
   @userAdministrator
   
 */
package com.zfsoft.zf_new_email.modules.emaildetail;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import android.content.Intent;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v4.view.ViewPager;
import android.text.TextUtils;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.PopupWindow.OnDismissListener;
import com.zfsoft.zf_new_email.R;
import com.zfsoft.zf_new_email.base.BaseFragment;
import com.zfsoft.zf_new_email.constant.Constant;
import com.zfsoft.zf_new_email.entity.Attachment;
import com.zfsoft.zf_new_email.entity.Email;
import com.zfsoft.zf_new_email.modules.emailsendorreply.EmailSendOrReplyActivity;
import com.zfsoft.zf_new_email.widget.scrollview.CustomScrollView;
import com.zfsoft.zf_new_email.widget.scrollview.ScrollViewListener;

/**
 * @author wesley
 * @date 2016-10-19下午7:40:37
 * @Description: ui展示层
 */
public class EmailDetailFragment extends BaseFragment<EmailDetailPresenter> implements OnClickListener, ScrollViewListener, EmailDetailContract.View {

	private Email email;
	private TextView tv_getter; // 收件人
	private TextView tv_subject; // 主题
	private TextView tv_time; // 时间
	private LinearLayout ll_attachment; // 附件的布局
	private TextView tv_attachment_number; // 附件的数量
	private TextView tv_attachment_size; // 附件的大小
	private ImageView iv_attachment_arrow; // 附件下拉图标
	private ListView rv_recycler; // recycler
	private TextView tv_other_attachment; // 其他附件
	private TextView tv_attachment_content; // 附件内容
	private WebView wv_attachment_content; // 附件内容
	private View viewLine; // 线
	private View viewLine_attachment; // 附件个数小于2时显示
	private EmailDetailAttachmentAdapter adapter; // 适配器
	private ImageView iv_scroll_to_top; // 置顶
	private CustomScrollView sv_scroll; // scrollview
	private LinearLayout ll_delete; // 删除
	private LinearLayout ll_reply; // 回复某人
	private LinearLayout ll_reply_all; // 回复全部
	private LinearLayout ll_forward; // 转发
	private LinearLayout ll_menu; // 菜单
	private ViewPager viewPager;
	private List<Email> list;
	private int type; // 0:收件箱 1:未读邮件 2:草稿箱 3:已发送 4:已删除
	private PopupWindow popupWindow;

	@Override
	public int getLayoutId() {
		return R.layout.fragment_email_detail;
	}

	@Override
	public void initVariables() {
		handleBundle();
	}

	@Override
	public void initViews(View view) {
		tv_getter = (TextView) view.findViewById(R.id.email_detail_getter);
		tv_subject = (TextView) view.findViewById(R.id.email_detail_subject);
		tv_time = (TextView) view.findViewById(R.id.email_detail_time);
		ll_attachment = (LinearLayout) view.findViewById(R.id.email_detail_attachments);
		tv_attachment_number = (TextView) view.findViewById(R.id.email_detail_attachment_number);
		tv_attachment_size = (TextView) view.findViewById(R.id.email_detail_attachment_size);
		iv_attachment_arrow = (ImageView) view.findViewById(R.id.email_detail_attachment_arrow);
		rv_recycler = (ListView) view.findViewById(R.id.email_detail_recycler_view);
		tv_other_attachment = (TextView) view.findViewById(R.id.email_detail_other_attachment);
		tv_attachment_content = (TextView) view.findViewById(R.id.email_detail_content);
		viewLine = view.findViewById(R.id.email_detail_view_line);
		viewLine_attachment = view.findViewById(R.id.email_detail_view_attachment);
		wv_attachment_content = (WebView) view.findViewById(R.id.email_detail_content_webview);
		sv_scroll = (CustomScrollView) view.findViewById(R.id.email_detail_scroll);
		ll_delete = (LinearLayout) ((EmailDetailActivity) context).findViewById(R.id.detail_mail_delete_linear);
		ll_reply = (LinearLayout) ((EmailDetailActivity) context).findViewById(R.id.detail_mail_replay_linear);
		ll_reply_all = (LinearLayout) ((EmailDetailActivity) context).findViewById(R.id.detail_mail_replay_all_linear);
		ll_forward = (LinearLayout) ((EmailDetailActivity) context).findViewById(R.id.detail_mail_forward_linear);
		viewPager = (ViewPager) ((EmailDetailActivity) context).findViewById(R.id.detail_email_view_pager);
		iv_scroll_to_top = (ImageView) ((EmailDetailActivity) context).findViewById(R.id.detail_image_scroll);
		ll_menu = (LinearLayout) ((EmailDetailActivity) context).findViewById(R.id.detail_mail_menu_linear);
		initData();

		// scrollview滚动监听
		sv_scroll.setScrollViewListener(this);
		ll_delete.setOnClickListener(this);
		ll_reply.setOnClickListener(this);
		ll_reply_all.setOnClickListener(this);
		ll_forward.setOnClickListener(this);
		ll_menu.setOnClickListener(this);
		iv_scroll_to_top.setOnClickListener(this);
	}

	public static EmailDetailFragment newInstance(Email email, List<Email> list, int type) {
		EmailDetailFragment fragment = new EmailDetailFragment();
		Bundle bundle = new Bundle();
		bundle.putSerializable("email", email);
		bundle.putSerializable("list", (Serializable) list);
		bundle.putInt("type", type);
		fragment.setArguments(bundle);
		return fragment;
	}

	// 处理bundle
	@SuppressWarnings("unchecked")
	private void handleBundle() {
		Bundle bundle = getArguments();
		if (bundle != null) {
			email = (Email) bundle.getSerializable("email");
			list = (List<Email>) bundle.getSerializable("list");
			type = bundle.getInt("type");
		}
	}

	// 初始化数据
	private void initData() {
		if (email == null) {
			return;
		}
		ArrayList<String> emailTo = email.getToName(); // 收件人列表
		String emailSubject = email.getSubject(); // 主题
		String emailTime = email.getSentdata(); // 时间
		List<Attachment> listAttachment = email.getAttachments(); // 附件集合
		boolean isHtml = email.isHtml(); // 是文本还是网页
		String content = email.getContent(); // 邮件内容

		if (emailTo != null) {
			StringBuilder builder = new StringBuilder();
			for (String name : emailTo) {
				if (!TextUtils.isEmpty(name)) {
					builder.append(name + "  ");
				}
			}
			if (TextUtils.isEmpty(builder.toString())) {
				builder = new StringBuilder();
				List<String> address = email.getToAddress();
				for (String add : address) {
					if (!TextUtils.isEmpty(add)) {
						builder.append(add + "  ");
					}
				}
			}
			tv_getter.setText(builder.toString());
		}
		tv_subject.setText(emailSubject);
		tv_time.setText(emailTime);
		if (listAttachment != null && listAttachment.size() > 0) {
			ll_attachment.setVisibility(View.VISIBLE);
			tv_attachment_size.setText(email.getTotalSize());
			int size = listAttachment.size();
			tv_attachment_number.setText(size + getResources().getString(R.string.number_of_attachment));
			if (size > 2) {
				viewLine.setVisibility(View.VISIBLE);
				tv_other_attachment.setVisibility(View.VISIBLE);
				iv_attachment_arrow.setVisibility(View.VISIBLE);
				tv_other_attachment.setText(getResources().getString(R.string.other_attachment, (String.valueOf(size - 2))));
				iv_attachment_arrow.setOnClickListener(this);
				tv_other_attachment.setOnClickListener(this);
			} else {
				iv_attachment_arrow.setVisibility(View.GONE);
				tv_other_attachment.setVisibility(View.GONE);
				viewLine.setVisibility(View.GONE);
				viewLine_attachment.setVisibility(View.VISIBLE);
			}

			adapter = new EmailDetailAttachmentAdapter(getActivity(), listAttachment);
			rv_recycler.setAdapter(adapter);
			setListViewHeightBasedOnChildren(rv_recycler);
		} else {
			ll_attachment.setVisibility(View.GONE);
			rv_recycler.setVisibility(View.GONE);
			viewLine.setVisibility(View.GONE);
		}

		if (isHtml) {
			tv_attachment_content.setVisibility(View.GONE);
			wv_attachment_content.setVisibility(View.VISIBLE);
			wv_attachment_content.loadDataWithBaseURL(null, content, "text/html", "utf-8", null);
			wv_attachment_content.getSettings().setBuiltInZoomControls(true);
			wv_attachment_content.setWebChromeClient(new WebChromeClient());
		} else {
			tv_attachment_content.setVisibility(View.VISIBLE);
			wv_attachment_content.setVisibility(View.GONE);
			tv_attachment_content.setText(content);
		}

		if (!isReplyAllDisplay()) {
			ll_reply_all.setTag("0");
			ll_reply_all.setVisibility(View.GONE);
		} else {
			ll_reply_all.setTag("1");
			ll_reply_all.setVisibility(View.VISIBLE);
		}
		switch (type) {
		/**
		 * 收件箱
		 */
		case 0:

			break;

		/**
		 * 未读邮件
		 */
		case 1:
			break;

		/**
		 * 草稿箱
		 */
		case 2:
			ll_reply.setVisibility(View.GONE);
			ll_reply_all.setVisibility(View.GONE);
			ll_forward.setVisibility(View.GONE);
			ll_menu.setVisibility(View.GONE);
			break;

		/**
		 * 已发送
		 */
		case 3:

			break;

		/**
		 * 已删除
		 */
		case 4:

			break;

		default:
			break;
		}
	}

	// 判读回复全部是否显示
	private boolean isReplyAllDisplay() {
		if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
			ArrayList<String> nameList = list.get(viewPager.getCurrentItem()).getToName();
			if (nameList == null || nameList.size() <= 1) {
				return false;
			}
			return true;
		}
		return false;
	}

	@Override
	public void onClick(View view) {
		if (view == null) {
			return;
		}

		int key = view.getId();

		if (key == R.id.email_detail_attachment_arrow || key == R.id.email_detail_other_attachment) {
			showOrHideList();
		} else if (key == R.id.detail_mail_delete_linear) {
			if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
				int position = viewPager.getCurrentItem();
				updateData(position);
			}
		} else if (key == R.id.detail_mail_replay_linear) {
			if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
				Intent intent = new Intent(context, EmailSendOrReplyActivity.class);
				Bundle bundle = new Bundle();
				bundle.putInt("type", 1);
				bundle.putInt("inbox_type", type);
				bundle.putSerializable("email", list.get(viewPager.getCurrentItem()));
				intent.putExtras(bundle);
				startActivity(intent);
			}
		} else if (key == R.id.detail_mail_replay_all_linear) {
			if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
				Intent intent = new Intent(context, EmailSendOrReplyActivity.class);
				Bundle bundle = new Bundle();
				bundle.putInt("type", 2);
				bundle.putInt("inbox_type", type);
				bundle.putSerializable("email", list.get(viewPager.getCurrentItem()));
				intent.putExtras(bundle);
				startActivity(intent);
			}
		} else if (key == R.id.detail_mail_forward_linear) {
			if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
				Intent intent = new Intent(context, EmailSendOrReplyActivity.class);
				Bundle bundle = new Bundle();
				bundle.putInt("type", 3);
				bundle.putInt("inbox_type", type);
				bundle.putSerializable("email", list.get(viewPager.getCurrentItem()));
				intent.putExtras(bundle);
				startActivity(intent);
			}
		} else if (key == R.id.detail_image_scroll) {
			sv_scroll.scrollTo(0, 0);
		} else if (key == R.id.detail_mail_menu_linear) {
			showPopupWindow();
		} else if (key == R.id.popup_mark_or_not) {
			popupWindow.dismiss();
			if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
				int position = viewPager.getCurrentItem();
				int messageNumber = list.get(position).getMessageNumber();
				String messageId = list.get(position).getMessageID();
				boolean isNews = list.get(position).isNews();
				if (isNews) {
					list.get(position).setNews(false);
					presenter.updateMailStatus(messageId, messageNumber, 0, type, position);
				} else {
					list.get(position).setNews(true);
					presenter.updateMailStatus(messageId, messageNumber, 1, type, position);
				}
			}
		} else if (key == R.id.popup_un_mark_star) {
			popupWindow.dismiss();
			if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
				Intent intent = new Intent(context, EmailSendOrReplyActivity.class);
				Bundle bundle = new Bundle();
				bundle.putInt("type", 4);
				bundle.putInt("inbox_type", type);
				bundle.putSerializable("email", list.get(viewPager.getCurrentItem()));
				intent.putExtras(bundle);
				startActivity(intent);
			}
		} else if (key == R.id.forward_with_attachment) {
			popupWindow.dismiss();
			if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
				Intent intent = new Intent(context, EmailSendOrReplyActivity.class);
				Bundle bundle = new Bundle();
				bundle.putInt("type", 5);
				bundle.putInt("inbox_type", type);
				bundle.putSerializable("email", list.get(viewPager.getCurrentItem()));
				intent.putExtras(bundle);
				startActivity(intent);
			}
		} else if (key == R.id.reply_all_with_attachment) {
			popupWindow.dismiss();
			if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
				Intent intent = new Intent(context, EmailSendOrReplyActivity.class);
				Bundle bundle = new Bundle();
				bundle.putInt("type", 6);
				bundle.putInt("inbox_type", type);
				bundle.putSerializable("email", list.get(viewPager.getCurrentItem()));
				intent.putExtras(bundle);
				startActivity(intent);
			}
		} else if (key == R.id.popup_star) {
			popupWindow.dismiss();
			if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
				boolean isFlaged = checkEmailIsFlaged();
				int position = viewPager.getCurrentItem();
				int messageNumber = list.get(position).getMessageNumber();
				String messageId = list.get(position).getMessageID();
				if (isFlaged) {
					list.get(position).setFlaged(false);
					presenter.markOrUnMarkMail(messageId, messageNumber, 0, type, position);
				} else {
					list.get(position).setFlaged(true);
					presenter.markOrUnMarkMail(messageId, messageNumber, 1, type, position);
				}
			}
		}
	}

	// 显示popupwindow
	private void showPopupWindow() {
		initPopupWindow();
		setBackgroundAlpha(0.5f);
		popupWindow.showAtLocation(((EmailDetailActivity) context).findViewById(R.id.email_detal_frame), Gravity.BOTTOM, 0, 0);
	}

	// 初始化popupwindow
	private void initPopupWindow() {
		popupWindow = new PopupWindow((EmailDetailActivity) context);
		popupWindow.setWidth(LinearLayout.LayoutParams.MATCH_PARENT);
		popupWindow.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT);
		View view = LayoutInflater.from(context).inflate(R.layout.email_list_popup, null);
		TextView tv_mark_or_not = (TextView) view.findViewById(R.id.popup_mark_or_not);
		LinearLayout ll_reply_with_attachment = (LinearLayout) view.findViewById(R.id.popup_un_mark_star);
		LinearLayout ll_forward_with_attachment = (LinearLayout) view.findViewById(R.id.forward_with_attachment);
		LinearLayout ll_reply_all_with_attachment = (LinearLayout) view.findViewById(R.id.reply_all_with_attachment);
		TextView tv_reply_with_attachment = (TextView) view.findViewById(R.id.reply_with_attachment);
		TextView tv_star = (TextView) view.findViewById(R.id.popup_star);
		tv_reply_with_attachment.setText(R.string.reply_with_attachment);
		popupWindow.setContentView(view);
		popupWindow.setAnimationStyle(R.style.ActionSheetDialogAnimation);
		popupWindow.setFocusable(true);
		ColorDrawable dw = new ColorDrawable(0xb0000000);
		popupWindow.setBackgroundDrawable(dw);
		popupWindow.setOnDismissListener(new OnDismissListener() {
			@Override
			public void onDismiss() {
				setBackgroundAlpha(1f);
			}
		});

		if (isEmailNews()) {
			tv_mark_or_not.setText(R.string.mark_read);
		} else {
			tv_mark_or_not.setText(R.string.mark_un_read);
		}

		if (checkEmailIsFlaged()) {
			tv_star.setText(R.string.mark_un_star);
		} else {
			tv_star.setText(R.string.mark_star);
		}

		if (isHasAttachment()) {
			ll_reply_with_attachment.setVisibility(View.VISIBLE);
			ll_forward_with_attachment.setVisibility(View.VISIBLE);
			ll_reply_with_attachment.setOnClickListener(this);
			ll_forward_with_attachment.setOnClickListener(this);
			int tag = Integer.parseInt(ll_reply_all.getTag().toString());
			if (tag == 0) {
				ll_reply_all_with_attachment.setVisibility(View.GONE);
			} else {
				ll_reply_all_with_attachment.setVisibility(View.VISIBLE);
				ll_reply_all_with_attachment.setOnClickListener(this);
			}
		} else {
			ll_reply_all_with_attachment.setVisibility(View.GONE);
			ll_reply_with_attachment.setVisibility(View.GONE);
			ll_forward_with_attachment.setVisibility(View.GONE);
		}
		tv_mark_or_not.setOnClickListener(this);
		tv_star.setOnClickListener(this);
	}

	// 判断邮件是否被标记
	private boolean checkEmailIsFlaged() {
		if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
			return list.get(viewPager.getCurrentItem()).isFlaged();
		}
		return false;
	}

	// 判断是否有附件
	private boolean isHasAttachment() {
		if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
			ArrayList<Attachment> listAttachment = list.get(viewPager.getCurrentItem()).getAttachments();
			if (listAttachment == null || listAttachment.size() == 0) {
				return false;
			}
			return true;
		}
		return false;
	}

	// 设置透明度
	private void setBackgroundAlpha(float bgAlpha) {
		WindowManager.LayoutParams lp = ((EmailDetailActivity) context).getWindow().getAttributes();
		lp.alpha = bgAlpha;
		if (bgAlpha == 1) {
			((EmailDetailActivity) context).getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);// 不移除该Flag的话,在有视频的页面上的视频会出现黑屏的bug
		} else {
			((EmailDetailActivity) context).getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);// 此行代码主要是解决在华为手机上半透明效果无效的bug
		}
		((EmailDetailActivity) context).getWindow().setAttributes(lp);
	}

	// 显示或者隐藏列表
	private void showOrHideList() {
		int tag = Integer.parseInt(iv_attachment_arrow.getTag().toString());
		if (tag == 0) {
			tv_other_attachment.setVisibility(View.GONE);
			viewLine_attachment.setVisibility(View.VISIBLE);
			viewLine.setVisibility(View.GONE);
			adapter.setHide(false);
			adapter.notifyDataSetChanged();
			iv_attachment_arrow.setTag("1");
		} else if (tag == 1) {
			tv_other_attachment.setVisibility(View.VISIBLE);
			viewLine_attachment.setVisibility(View.GONE);
			viewLine.setVisibility(View.VISIBLE);
			adapter.setHide(true);
			adapter.notifyDataSetChanged();
			iv_attachment_arrow.setTag("0");
		}
		setListViewHeightBasedOnChildren(rv_recycler);
	}

	// 计算listview的高度
	private void setListViewHeightBasedOnChildren(ListView listView) {
		// 获取ListView对应的Adapter
		ListAdapter listAdapter = listView.getAdapter();
		if (listAdapter == null) {
			return;
		}

		int count = listAdapter.getCount();
		int totalHeight = 0;
		for (int i = 0, len = count; i < len; i++) {
			// listAdapter.getCount()返回数据项的数目
			View listItem = listAdapter.getView(i, null, listView);
			// 计算子项View 的宽高
			listItem.measure(0, 0);
			// 统计所有子项的总高度
			totalHeight += listItem.getMeasuredHeight();
		}

		ViewGroup.LayoutParams params = listView.getLayoutParams();
		params.height = totalHeight + (listView.getDividerHeight() * (count - 1));
		// listView.getDividerHeight()获取子项间分隔符占用的高度
		// params.height最后得到整个ListView完整显示需要的高度
		listView.setLayoutParams(params);
	}

	@Override
	public void onScrollChanged(int x, int y, int oldx, int oldy) {

		if (y < oldy) {
			// iv_scroll_to_top.setVisibility(View.VISIBLE);
		} else {
			// iv_scroll_to_top.setVisibility(View.GONE);
		}
	}

	@Override
	public void showDeteleError(String errorMessage) {
		Toast.makeText(context, errorMessage, Toast.LENGTH_LONG).show();
	}

	@Override
	public void showDeleteSuccess(String message) {
		Toast.makeText(context, message, Toast.LENGTH_LONG).show();
	}

	@Override
	public void updateData(int position) {
		Intent intent = new Intent();
		Bundle bundle = new Bundle();
		bundle.putInt("position", position);
		intent.putExtras(bundle);
		((EmailDetailActivity) context).setResult(Constant.RESULT_CODE_DETAIL_BACK_LIST, intent);
		context.finish();
	}

	@Override
	public void updateMailStatus(String messageId, int messageNumber, int status, int position) {
		presenter.updateMailStatus(messageId, messageNumber, status, type, position);
	}

	@Override
	public void setUserVisibleHint(boolean isVisibleToUser) {
		super.setUserVisibleHint(isVisibleToUser);
		if (isVisibleToUser) {
			if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
				int position = viewPager.getCurrentItem();
				boolean isNews = list.get(position).isNews();
				if (isNews) {
					list.get(position).setNews(false);
					updateMailStatus(list.get(position).getMessageID(), list.get(position).getMessageNumber(), 0, position);
				}
			}
		}
	}

	@Override
	public boolean isEmailNews() {

		if (list != null && viewPager != null && list.size() > viewPager.getCurrentItem()) {
			int position = viewPager.getCurrentItem();
			return list.get(position).isNews();
		}
		return false;
	}

	@Override
	public void updateEmailStatus(int status, int position) {
		if (list != null && list.size() > position) {
			switch (status) {
			case 0:
				list.get(position).setNews(true);
				break;

			case 1:
				list.get(position).setNews(false);
				break;

			default:
				break;
			}
		}
	}

	@Override
	public void markMailSuccess(int status, int position) {
		if (list != null && list.size() > position) {
			switch (status) {
			case 0:
				list.get(position).setFlaged(true);
				break;

			case 1:
				list.get(position).setFlaged(false);
				break;

			default:
				break;
			}
		}
	}
}
